/*
 * Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file was generated by JSLC -- DO NOT EDIT MANUALLY!
 */

package com.sun.scenario.effect.impl.sw.sse;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import com.sun.scenario.effect.Effect;
import com.sun.scenario.effect.FilterContext;
import com.sun.scenario.effect.FloatMap;
import com.sun.scenario.effect.ImageData;
import com.sun.scenario.effect.DisplacementMap;
import com.sun.scenario.effect.impl.BufferUtil;
import com.sun.scenario.effect.impl.HeapImage;
import com.sun.scenario.effect.impl.Renderer;
import com.sun.scenario.effect.impl.state.*;
import com.sun.javafx.geom.Rectangle;
import com.sun.javafx.geom.transform.BaseTransform;

public class SSEDisplacementMapPeer extends SSEEffectPeer  {

    public SSEDisplacementMapPeer(FilterContext fctx, Renderer r, String uniqueName) {
        super(fctx, r, uniqueName);
    }

    @Override
    protected final DisplacementMap getEffect() {
        return (DisplacementMap)super.getEffect();
    }


    private float[] getSampletx() {
        return new float[] {
            getEffect().getOffsetX(),
            getEffect().getOffsetY(),
            getEffect().getScaleX(),
            getEffect().getScaleY(),
        };
    }
    private float[] getImagetx() {
        float inset = getEffect().getWrap() ? 0.5f : 0f;
        return new float[] {
            inset / getInputNativeBounds(0).width,
            inset / getInputNativeBounds(0).height,
            (getInputBounds(0).width-2*inset) / getInputNativeBounds(0).width,
            (getInputBounds(0).height-2*inset) / getInputNativeBounds(0).height,
        };
    }
    private float getWrap() {
        return getEffect().getWrap() ? 1f : 0f;
    }

    @Override
    protected Object getSamplerData(int i) {
        return getEffect().getMapData();
    }

    @Override
    public int getTextureCoordinates(int inputIndex, float coords[],
                                     float srcX, float srcY,
                                     float srcNativeWidth,
                                     float srcNativeHeight,
                                     Rectangle dstBounds,
                                     com.sun.javafx.geom.transform.BaseTransform transform)
    {
        coords[0] = coords[1] = 0f;
        coords[2] = coords[3] = 1f;
        return 4;
    }


    @Override
    public ImageData filter(Effect effect,
                            BaseTransform transform,
                            Rectangle outputClip,
                            ImageData... inputs)
    {
        setEffect(effect);
        Rectangle dstBounds = getResultBounds(transform, outputClip, inputs);
        setDestBounds(dstBounds);

        // TODO: for now, all input images must be TYPE_INT_ARGB_PRE
        FloatMap src1 = (FloatMap)getSamplerData(1);
        int src1x = 0;
        int src1y = 0;
        int src1w = src1.getWidth();
        int src1h = src1.getHeight();
        int src1scan = src1.getWidth();
        float[] mapImg = src1.getData();
        HeapImage src0 = (HeapImage)inputs[0].getUntransformedImage();
        int src0x = 0;
        int src0y = 0;
        int src0w = src0.getPhysicalWidth();
        int src0h = src0.getPhysicalHeight();
        int src0scan = src0.getScanlineStride();
        int[] origImg =
            src0.getPixelArray();
        Rectangle src0Bounds = new Rectangle(src0x, src0y, src0w, src0h);
        Rectangle src0InputBounds = inputs[0].getUntransformedBounds();
        BaseTransform src0Transform = inputs[0].getTransform();
        setInputBounds(0, src0InputBounds);
        setInputNativeBounds(0, src0Bounds);


        float[] src1Rect = new float[] {0,0,1,1};
        float[] src0Rect = new float[4];
        getTextureCoordinates(0, src0Rect,
                              src0InputBounds.x, src0InputBounds.y,
                              src0w, src0h,
                              dstBounds, src0Transform);


        final int dstx = 0;
        final int dsty = 0;
        final int dstw = dstBounds.width;
        final int dsth = dstBounds.height;

        HeapImage dst = (HeapImage)getRenderer().getCompatibleImage(dstw, dsth);
        setDestNativeBounds(dst.getPhysicalWidth(), dst.getPhysicalHeight());
        int dstscan = dst.getScanlineStride();
        int[] dstPixels = dst.getPixelArray();
        
        float[] imagetx_arr = getImagetx();
        float[] sampletx_arr = getSampletx();
        float wrap = getWrap();


        filter(dstPixels, dstx, dsty, dstw, dsth, dstscan,
imagetx_arr[0], imagetx_arr[1], imagetx_arr[2], imagetx_arr[3],
mapImg,
src1Rect[0], src1Rect[1],
src1Rect[2], src1Rect[3],
src1w, src1h, src1scan,
origImg,
src0Rect[0], src0Rect[1],
src0Rect[2], src0Rect[3],
src0w, src0h, src0scan,
sampletx_arr[0], sampletx_arr[1], sampletx_arr[2], sampletx_arr[3],
wrap);


        return new ImageData(getFilterContext(), dst, dstBounds);
    }

    private static native void filter(int[] dstPixels,
                                      int dstx, int dsty,
                                      int dstw, int dsth,
                                      int dstscan,
float imagetx_x, float imagetx_y, float imagetx_z, float imagetx_w,
float[] mapImg_arr,
float src1Rect_x1, float src1Rect_y1,
float src1Rect_x2, float src1Rect_y2,
int src1w, int src1h, int src1scan,
int[] origImg_arr,
float src0Rect_x1, float src0Rect_y1,
float src0Rect_x2, float src0Rect_y2,
int src0w, int src0h, int src0scan,
float sampletx_x, float sampletx_y, float sampletx_z, float sampletx_w,
float wrap);
}

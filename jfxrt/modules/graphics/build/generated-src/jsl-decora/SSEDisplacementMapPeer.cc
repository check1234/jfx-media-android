/*
 * Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file was generated by JSLC -- DO NOT EDIT MANUALLY!
 */

#include <jni.h>
#include <math.h>
#include "SSEUtils.h"
#include "com_sun_scenario_effect_impl_sw_sse_SSEDisplacementMapPeer.h"

JNIEXPORT void JNICALL
Java_com_sun_scenario_effect_impl_sw_sse_SSEDisplacementMapPeer_filter
  (JNIEnv *env, jclass klass,
   jintArray dst_arr,
   jint dstx, jint dsty, jint dstw, jint dsth, jint dstscan,
jfloat imagetx_x, jfloat imagetx_y, jfloat imagetx_z, jfloat imagetx_w,
jfloatArray mapImg_arr,
jfloat src1Rect_x1, jfloat src1Rect_y1,
jfloat src1Rect_x2, jfloat src1Rect_y2,
jint src1w, jint src1h, jint src1scan,
jintArray origImg_arr,
jfloat src0Rect_x1, jfloat src0Rect_y1,
jfloat src0Rect_x2, jfloat src0Rect_y2,
jint src0w, jint src0h, jint src0scan,
jfloat sampletx_x, jfloat sampletx_y, jfloat sampletx_z, jfloat sampletx_w,
jfloat wrap)
{
    int dyi;
    float color_x, color_y, color_z, color_w;

    jint *dst = (jint *)env->GetPrimitiveArrayCritical(dst_arr, 0);
    if (dst == NULL) return;
    float mapImg_vals[4];
    jfloat *mapImg = (jfloat *)env->GetPrimitiveArrayCritical(mapImg_arr, 0);
    if (mapImg == NULL) return;
    float origImg_vals[4];
    jint *origImg = (jint *)env->GetPrimitiveArrayCritical(origImg_arr, 0);
    if (origImg == NULL) return;


    float inc1_x = (src1Rect_x2 - src1Rect_x1) / dstw;
    float inc1_y = (src1Rect_y2 - src1Rect_y1) / dsth;
    float inc0_x = (src0Rect_x2 - src0Rect_x1) / dstw;
    float inc0_y = (src0Rect_y2 - src0Rect_y1) / dsth;


    float pos1_y = src1Rect_y1 + inc1_y*0.5f;
    float pos0_y = src0Rect_y1 + inc0_y*0.5f;

    for (int dy = dsty; dy < dsty+dsth; dy++) {
        float pixcoord_y = (float)dy;

        dyi = dy*dstscan;

        float pos1_x = src1Rect_x1 + inc1_x*0.5f;
        float pos0_x = src0Rect_x1 + inc0_x*0.5f;

        for (int dx = dstx; dx < dstx+dstw; dx++) {
            float pixcoord_x = (float)dx;


            {
            float sample_res_x, sample_res_y, sample_res_z, sample_res_w;
            {
            float loc_tmp_x = pos1_x;
            float loc_tmp_y = pos1_y;
            fsample(mapImg, loc_tmp_x, loc_tmp_y,
                    src1w, src1h, src1scan,
                    mapImg_vals);
            sample_res_x = mapImg_vals[0];
            sample_res_y = mapImg_vals[1];
            sample_res_z = mapImg_vals[2];
            sample_res_w = mapImg_vals[3];

            }
            float off_x = sample_res_x;
            float off_y = sample_res_y;
            float off_z = sample_res_z;
            float off_w = sample_res_w;
            float loc_x = pos0_x + sampletx_z * (off_x + sampletx_x);
            float loc_y = pos0_y + sampletx_w * (off_y + sampletx_y);
            float floor_res_x, floor_res_y;
            {
            float x_tmp_x = loc_x;
            float x_tmp_y = loc_y;
            floor_res_x = floor(x_tmp_x);
            floor_res_y = floor(x_tmp_y);

            }
            loc_x -= wrap * floor_res_x;
            loc_y -= wrap * floor_res_y;
            loc_x = imagetx_x + (loc_x * imagetx_z);
            loc_y = imagetx_y + (loc_y * imagetx_w);
            {
            float loc_tmp_x = loc_x;
            float loc_tmp_y = loc_y;
            lsample(origImg, loc_tmp_x, loc_tmp_y,
                    src0w, src0h, src0scan,
                    origImg_vals);
            sample_res_x = origImg_vals[0];
            sample_res_y = origImg_vals[1];
            sample_res_z = origImg_vals[2];
            sample_res_w = origImg_vals[3];

            }
            color_x = sample_res_x;
            color_y = sample_res_y;
            color_z = sample_res_z;
            color_w = sample_res_w;
            }


            if (color_w < 0.f) color_w = 0.f; else if (color_w > 1.f) color_w = 1.f;
            if (color_x < 0.f) color_x = 0.f; else if (color_x > color_w) color_x = color_w;
            if (color_y < 0.f) color_y = 0.f; else if (color_y > color_w) color_y = color_w;
            if (color_z < 0.f) color_z = 0.f; else if (color_z > color_w) color_z = color_w;
            dst[dyi+dx] =
                ((int)(color_x * 0xff) << 16) |
                ((int)(color_y * 0xff) <<  8) |
                ((int)(color_z * 0xff) <<  0) |
                ((int)(color_w * 0xff) << 24);

            pos1_x += inc1_x;
            pos0_x += inc0_x;

        }

        pos1_y += inc1_y;
        pos0_y += inc0_y;

    }

    env->ReleasePrimitiveArrayCritical(dst_arr, dst, JNI_ABORT);
    env->ReleasePrimitiveArrayCritical(mapImg_arr, mapImg, JNI_ABORT);
    env->ReleasePrimitiveArrayCritical(origImg_arr, origImg, JNI_ABORT);

}
